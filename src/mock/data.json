{
  "js": [
    {
      "header": "JS基础(上)",
      "body": "<div class=\"postBody\">\n                \n    <div id=\"cnblogs_post_description\" style=\"display: none\">\n        JS与DOM的关系  变量的声明  数组与对象的操作 Js的内置对象的使用 window对象 作用域 找表标签对象 对象的操作 获取内联样式属性 对象的创建和删除 暴力结点 级联菜单的制作 定时器的使用\n    </div>\n<div id=\"cnblogs_post_body\" class=\"blogpost-body \">\n    <h1><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">JS与DOM的关系</span></h1>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">浏览器有渲染html代码的功能，把html源码（如div,p标签等）在内存里形成一个DOM对象</span></p>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">&nbsp;</span></p>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">文档对象模型DOM（Document&nbsp;Object&nbsp;Model）定义访问和处理HTML文档的标准方法。DOM&nbsp;将HTML文档呈现为带有元素、属性和文本的树结构（节点树）。</span></p>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">&nbsp;<img src=\"https://images2015.cnblogs.com/blog/1011409/201608/1011409-20160825145433866-1839116942.png\" alt=\"\" /></span></p>\n<p><img src=\"https://images2015.cnblogs.com/blog/1011409/201608/1011409-20160825145442022-578930892.png\" alt=\"\" /></p>\n<p>&nbsp;</p>\n<p class=\"p0\"><strong><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">HTML文档可以说由节点构成的集合，三种常见的DOM节点:</span></strong></p>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">1.&nbsp;元素节点：上图中&lt;html&gt;、&lt;body&gt;、&lt;p&gt;等都是元素节点，即标签。</span></p>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">2.&nbsp;文本节点:向用户展示的内容，如&lt;li&gt;里的内容JavaScript、DOM、CSS等文本。</span></p>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">3.&nbsp;属性节点:元素属性，如&lt;a&gt;标签的链接属性href=\"http://www.imooc.com\"。</span></p>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">&nbsp;</span></p>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\"><strong>BOM对象</strong>（把浏览器的地址栏，历史记录，DOM等装在一个对象）</span></p>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">浏览器内部有JS解释器/引擎；在html里的JS代码会被引擎所执行，执行的结果是对DOM对象的操作（即是对节点树内的标签进行操作）</span></p>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">JS添加特效&nbsp;：&nbsp;无非就是用JS操作DOM对象而已</span></p>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">&nbsp;</span></p>\n<h1><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">JS的引入方式</span></h1>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">JS代码可在html中任意位置编写，但浏览器解析代码是从上到下的，需注意此时html是否已经解析该标签，能让JS能否获取该DOM对象，所以有时会把代码放到html的结束前，即是&lt;/html&gt;前</span></p>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">直接在html中编写&nbsp;：&lt;script&nbsp;type=\"text/javascript\"&gt;代码&lt;/script&gt;&nbsp;</span></p>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">通过外部引用进来&nbsp;：&nbsp;&lt;script&nbsp;type=text/javascript&nbsp;src=&rdquo;&rdquo;&gt;&lt;/script&gt;</span></p>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">为防止网页加载缓慢，也可以把非关键的JavaScript放到网页底部</span></p>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">&nbsp;</span></p>\n<h1><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">变量的声明&nbsp;</span></h1>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">var&nbsp;变量名；变量名区分大小写；不用var声明会污染全局变量；变量名以字母、下划线、美元符号开头，后面部分可数字</span></p>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">函数&nbsp;即&nbsp;完成特定功能的代码段；</span></p>\n<h1><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">常用方法</span></h1>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">输出语句到html中，使用document.write(&ldquo;&rdquo;)</span></p>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">Confire()&nbsp;：消息确认对话框；点击确认返回true</span></p>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">&nbsp;</span></p>\n<h1><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">运算符问题</span></h1>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">拼接运算符：+&nbsp;，&nbsp;如果是数字则相加，是字符则连接&nbsp;；&nbsp;如2+3+&lsquo;love&rsquo;+4+5&nbsp;//输出5love45</span></p>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">和PHP不同，一般用.</span></p>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">&nbsp;</span></p>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\"><strong>逻辑运算符或&nbsp;：</strong>返回为true的值&nbsp;；&nbsp;如&nbsp;：&nbsp;</span></p>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">var&nbsp;a&nbsp;=&nbsp;1;</span></p>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">var&nbsp;b&nbsp;=&nbsp;false;</span></p>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">var&nbsp;d&nbsp;=&nbsp;(a&nbsp;||&nbsp;b);&nbsp;&nbsp;//d为1</span></p>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">&nbsp;</span></p>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\"><strong>逻辑运算符与&nbsp;：</strong>&nbsp;返回最后面的变量值</span></p>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">var&nbsp;a&nbsp;=&nbsp;22;</span></p>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">var&nbsp;b=33;</span></p>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">alert(a&nbsp;&amp;&amp;&nbsp;b);&nbsp;//输出33</span></p>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">&nbsp;</span></p>\n<h1><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">数组与对象的操作</span></h1>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">JS中数组的数字键值只能从0开始递增</span></p>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">注意&nbsp;&nbsp;：&nbsp;数组中括号，JS中length&nbsp;；&nbsp;对象用大括号</span></p>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">&nbsp;<img src=\"https://images2015.cnblogs.com/blog/1011409/201608/1011409-20160825145628866-442077365.png\" alt=\"\" /></span></p>\n<h1><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">Js的内置对象的使用</span></h1>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">&nbsp;<img src=\"https://images2015.cnblogs.com/blog/1011409/201608/1011409-20160825145639460-1509798562.png\" alt=\"\" /></span></p>\n<p>&nbsp;</p>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">&nbsp;<img src=\"https://images2015.cnblogs.com/blog/1011409/201608/1011409-20160825145709991-215923540.png\" alt=\"\" /></span></p>\n<p>&nbsp;</p>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">&nbsp;</span></p>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">&nbsp;</span></p>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">&nbsp;</span></p>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">&nbsp;</span></p>\n<h1><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">window对象</span></h1>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">window对象和JS没关系；是浏览的一个数组对象，供JS来操作。</span></p>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">Window.open()</span></p>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">&lt;script&nbsp;type=\"text/javascript\"&gt;&nbsp;window.open('http://www.imooc.com','_blank','width=300,height=200,menubar=no,toolbar=no,&nbsp;status=no,scrollbars=yes')&nbsp;&lt;/script&gt;</span></p>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">&nbsp;<img src=\"https://images2015.cnblogs.com/blog/1011409/201608/1011409-20160825145721913-1751135003.png\" alt=\"\" /></span></p>\n<p><img src=\"https://images2015.cnblogs.com/blog/1011409/201608/1011409-20160825145741194-960401521.png\" alt=\"\" /></p>\n<p><img src=\"https://images2015.cnblogs.com/blog/1011409/201608/1011409-20160825145747788-842949661.png\" alt=\"\" /></p>\n<p>&nbsp;</p>\n<p class=\"p0\"><strong><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">作用域</span></strong></p>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">情况1：函数内没找到该参数，会一直外部继续找，直到全局空间（函数外）寻找window属性</span></p>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">情况2：var声明变量；在函数内声明仅属于该函数内的局部变量。如果直接赋值，不加var（如：a=10）就会一直往外找该变量，找到则赋值给它，否则默认赋给window.变量名</span></p>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">&nbsp;<img src=\"https://images2015.cnblogs.com/blog/1011409/201608/1011409-20160825145804226-559924072.png\" alt=\"\" /></span></p>\n<p>&nbsp;</p>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">&nbsp;</span></p>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">&nbsp;</span></p>\n<p class=\"p0\"><strong><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">找表标签对象</span></strong></p>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">不会的方法到h3c查找HTML&nbsp;DOM&nbsp;手册</span></p>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">方法名如果返回是集合则getElements&nbsp;，如class，P等标签都不是唯一的所以s</span></p>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">id唯一返回对象，P等不唯一返回集合</span></p>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">&nbsp;<img src=\"https://images2015.cnblogs.com/blog/1011409/201608/1011409-20160825145830335-1742372511.png\" alt=\"\" /></span></p>\n<p>&nbsp;</p>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">根据id获取</span></p>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">&nbsp;<img src=\"https://images2015.cnblogs.com/blog/1011409/201608/1011409-20160825145858132-671671653.png\" alt=\"\" /></span></p>\n<p>&nbsp;</p>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">根据标签找对象</span></p>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">&nbsp;<img src=\"https://images2015.cnblogs.com/blog/1011409/201608/1011409-20160825145907601-1880788102.png\" alt=\"\" /></span></p>\n<p class=\"p0\">&nbsp;</p>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">对于表单元素，可以使用name寻找</span></p>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">&nbsp;<img src=\"https://images2015.cnblogs.com/blog/1011409/201608/1011409-20160825145942241-1172163455.png\" alt=\"\" /></span></p>\n<p>&nbsp;</p>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">按照类名查找</span></p>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">&nbsp;<img src=\"https://images2015.cnblogs.com/blog/1011409/201608/1011409-20160825145919522-509876092.png\" alt=\"\" /></span></p>\n<p>&nbsp;</p>\n<p class=\"p0\"><strong><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">根据结点查找</span></strong></p>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">&nbsp;<img src=\"https://images2015.cnblogs.com/blog/1011409/201608/1011409-20160825145955507-1084285162.png\" alt=\"\" /></span></p>\n<p class=\"p0\">&nbsp;</p>\n<p class=\"p0\">&nbsp;</p>\n<h1><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">对象的操作</span></h1>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">img对象&nbsp;下还有多个属性</span></p>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">&nbsp;<img src=\"https://images2015.cnblogs.com/blog/1011409/201608/1011409-20160825150031897-393913486.png\" alt=\"\" /></span></p>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">img.src&nbsp;&nbsp;&nbsp;img.style.width</span></p>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">&nbsp;</span></p>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">注意&nbsp;：</span></p>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">&lt;div&nbsp;class=\"ch\"&gt;&nbsp;中操作div对象的修改class名字属性用div.className&nbsp;=&nbsp;</span></p>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">CSS样式与DOM&nbsp;：&nbsp;obj.style.width</span></p>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">CSS属性带横线则&nbsp;去之首字大写&nbsp;：&nbsp;border-top&nbsp;&agrave;&nbsp;obj.style.borderTop</span></p>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">注意&nbsp;：此处获取宽高是把CSS内嵌，比较方便；并且返回的是字符串形式</span></p>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">实战&nbsp;每次点击变颜色并且边框增大10像素</span></p>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">&nbsp;<img src=\"https://images2015.cnblogs.com/blog/1011409/201608/1011409-20160825150055991-170270256.png\" alt=\"\" /></span></p>\n<p><img src=\"https://images2015.cnblogs.com/blog/1011409/201608/1011409-20160825150100226-319570206.png\" alt=\"\" /></p>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">Object.style.display&nbsp;=&nbsp;none/block&nbsp;&nbsp;实现隐藏和显示</span></p>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">Object.className&nbsp;=&nbsp;name&nbsp;实现修改类名</span></p>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">&nbsp;</span></p>\n<p class=\"p0\"><strong><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">获取内联样式属性</span></strong></p>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">获取内存中在渲染的style的值，使用obj.currrentStyle（）&nbsp;和&nbsp;window.getComputedStyle()获取</span></p>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">window.getComputedStyle(obj,伪元素)[arrt]&nbsp;：&nbsp;</span></p>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">obj获取运算后的样式目标元素&nbsp;；&nbsp;</span></p>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">伪元素&nbsp;：&nbsp;一般为null，可以修改为鼠标放上去的状态&lsquo;：active&rsquo;</span></p>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">&nbsp;</span></p>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">获取的值只读即是只能获取，不能直接修改，要修改还是要通过obj.style.属性&nbsp;修改</span></p>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">内联样式一开始不能够获取是因为一开始没有定义内联定义，但是能够初始化赋值</span></p>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">获取的颜色返回是RGB形式的</span></p>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">&nbsp;</span></p>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">注意：只有IE和Opera支持使用currentStyle获取HTMLElement的计算后的样式</span></p>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">标准浏览器使用getComputedStyle()，对此兼容性问题，使用封装进方法中进行判断使用哪个。obj即是对象名，arrt是获取属性名</span></p>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">&nbsp;<img src=\"https://images2015.cnblogs.com/blog/1011409/201608/1011409-20160825150122351-112565543.png\" alt=\"\" /></span></p>\n<p>&nbsp;</p>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">对象的创建和删除&nbsp;node.html</span></p>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">&nbsp;<img src=\"https://images2015.cnblogs.com/blog/1011409/201608/1011409-20160825150345522-1884992215.png\" alt=\"\" /></span></p>\n<p><img src=\"https://images2015.cnblogs.com/blog/1011409/201608/1011409-20160825150349897-1173084913.png\" alt=\"\" /></p>\n<p><img src=\"https://images2015.cnblogs.com/blog/1011409/201608/1011409-20160825150431351-1126443639.png\" alt=\"\" /></p>\n<p>&nbsp;</p>\n<p class=\"p0\"><strong><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">暴力结点&nbsp;nodein.html</span></strong></p>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">innerHTML&nbsp;是结点的一个属性值，代表结点内的内容，即是某标签内的内容</span></p>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">&nbsp;<img src=\"https://images2015.cnblogs.com/blog/1011409/201608/1011409-20160825150455710-1391031447.png\" alt=\"\" /></span></p>\n<p><img src=\"https://images2015.cnblogs.com/blog/1011409/201608/1011409-20160825150459694-1491339920.png\" alt=\"\" /></p>\n<p><img src=\"https://images2015.cnblogs.com/blog/1011409/201608/1011409-20160825150505647-1567888633.png\" alt=\"\" /></p>\n<p>&nbsp;</p>\n<p class=\"p0\"><strong>级联菜单的制作&nbsp;jilianorder.html</strong></p>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">&nbsp;<img src=\"https://images2015.cnblogs.com/blog/1011409/201608/1011409-20160825150556882-35681168.png\" alt=\"\" /></span></p>\n<p><img src=\"https://images2015.cnblogs.com/blog/1011409/201608/1011409-20160825150600319-964472580.png\" alt=\"\" /></p>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">&nbsp;</span></p>\n<p class=\"p0\"><strong><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">定时器的使用</span></strong></p>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">不是js的内容属于浏览器的</span></p>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">setTimeout&nbsp;(表达式,延时时间)&nbsp;：&nbsp;设置在延迟多少时间执行一次一个表达式</span></p>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">clearTimeout(名);&nbsp;设置清除这个延迟器</span></p>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">&nbsp;<img src=\"https://images2015.cnblogs.com/blog/1011409/201608/1011409-20160825150615460-351251436.png\" alt=\"\" /></span></p>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">setInterval()&nbsp;方法可按照指定的周期（以毫秒计）来调用函数或计算表达式；多次执行</span></p>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">clearInterval()&nbsp;方法取消&nbsp;setInterval()&nbsp;的设置</span></p>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">&nbsp;</span></p>\n</div>\n</div>"
    },
    {
      "header": "JS基础(中)",
      "body": " <div class=\"postBody\">\n                \n<div id=\"cnblogs_post_body\" class=\"blogpost-body \">\n    <div class=\"cnblogs_code\">\n<pre>&lt;script&gt;\n<span style=\"color: #008000;\">//</span><span style=\"color: #008000;\"> 定义一个函数，用来读取特定的cookie值。</span>\n<span style=\"color: #0000ff;\">function</span><span style=\"color: #000000;\"> getCookie(cookie_name)\n{\n    </span><span style=\"color: #0000ff;\">var</span> allcookies = document.<span style=\"color: #000000;\">cookie;\n    </span><span style=\"color: #0000ff;\">var</span> cookie_start = allcookies.indexOf(cookie_name); <span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">寻找名第一次出现的位置\n    // 如果找到了就代表cookie存在\n    // 反之，就说明不存在。  </span>\n    <span style=\"color: #0000ff;\">if</span> (cookie_start != -1<span style=\"color: #000000;\">)\n    {\n        </span><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\"> 把cookie_start放在值的开始，只要给值加1即可。  </span>\n        cookie_start += cookie_name.length + 1<span style=\"color: #000000;\">; \n        </span><span style=\"color: #0000ff;\">var</span> cookie_end = allcookies.indexOf(';',<span style=\"color: #000000;\"> cookie_start);\n        </span><span style=\"color: #0000ff;\">if</span> (cookie_end == -1<span style=\"color: #000000;\">)\n        {\n            cookie_end </span>= allcookies.<span style=\"color: #000000;\">length;\n        }\n</span>&lt;/script&gt;</pre>\n</div>\n<p>&nbsp;</p>\n</div>\n<div id=\"MySignature\"></div>\n<div class=\"clear\"></div>\n<div id=\"blog_post_info_block\">\n    <div id=\"blog_post_info\"></div>\n    <div class=\"clear\"></div>\n    <div id=\"post_next_prev\"></div>\n</div>\n            </div>"
    },
    {
      "header": "JS基础(下)",
      "body": " <div class=\"postBody\">\n                \n<div id=\"cnblogs_post_body\" class=\"blogpost-body \">\n    <h1><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">事件DOM&nbsp;Event</span></h1>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">更多事件请查询h3c&nbsp;&nbsp;htmldom参考手册&nbsp;&nbsp;event&nbsp;&nbsp;</span></p>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">onclick()&nbsp;：当点击时</span></p>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">onfocus()&nbsp;：获得焦点时&nbsp;；当点击某个区域时触发，如点击输入框</span></p>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">onblur()&nbsp;&nbsp;：失去焦点时</span></p>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">onmouseover&nbsp;鼠标经过时,触发</span></p>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">&nbsp;</span></p>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">onload事件是当网页加载完后发挥作用；注意如果加载外网的图片也要加载完之后才生效</span></p>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">onsubmit()&nbsp;：提交事件，点击提交按钮的时候触发&nbsp;；阻止提交要return</span></p>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">使用检查表单提交数据是否合法，直接在浏览器内完成，提交到服务器远浪费资源</span></p>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">&nbsp;<img src=\"https://images2015.cnblogs.com/blog/1011409/201608/1011409-20160825163028069-2006700810.png\" alt=\"\" /></span></p>\n<p><img src=\"https://images2015.cnblogs.com/blog/1011409/201608/1011409-20160825163030554-1171158117.png\" alt=\"\" /></p>\n<p>&nbsp;</p>\n<h1><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">行为结构样式分离</span></h1>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">&nbsp;<img src=\"https://images2015.cnblogs.com/blog/1011409/201608/1011409-20160825163038694-753579548.png\" alt=\"\" /></span></p>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">行为结构样式分离即是把行为和样式分开不写在一条语句中，如上图是合在一起。样式分离则把CSS写成内联样式或者外联样式</span></p>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">换个角度来看&nbsp;onclick也可以看做div的一个属性，因为写在div里面</span></p>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">this指向调用者，如php中</span></p>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">&nbsp;</span></p>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">有时候你仅仅开发html，CSS是被另外的人进行写的，因此你不知道太多CSS的具体样式.</span></p>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">&nbsp;</span></p>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">&nbsp;</span></p>\n<h1><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">事件对象&nbsp;duixiangshijain.html</span></h1>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">事件发生的瞬间，发生的位置，时间，鼠标点击键位，触发的节点等信息，被打包成一个对象，此对象系统自动传递给&nbsp;事件函数的第一个参数（即是你调用的函数）</span></p>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">target&nbsp;事件属性可返回事件的目标节点，比如某个表格</span></p>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">&nbsp;</span></p>\n<p class=\"p0\"><strong><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">实战：碰不到的美女</span></strong></p>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">&nbsp;<img src=\"https://images2015.cnblogs.com/blog/1011409/201608/1011409-20160825163655991-1748226562.png\" alt=\"\" width=\"213\" height=\"200\" /></span></p>\n<p><img src=\"https://images2015.cnblogs.com/blog/1011409/201608/1011409-20160825163703476-1719911882.png\" alt=\"\" /></p>\n<p>&nbsp;</p>\n<h1><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">事件委托</span></h1>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">把事件的处理委托给上级进行处理，关键属性target属性</span></p>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">实战五子棋</span></p>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">&nbsp;<img src=\"https://images2015.cnblogs.com/blog/1011409/201608/1011409-20160825163713882-1513488974.png\" alt=\"\" /></span></p>\n<h1><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">正则表达式验证邮箱</span></h1>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">^&nbsp;:&nbsp;表示从字符串开始的地方就验证</span></p>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">$&nbsp;:&nbsp;表示结束检测</span></p>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">/w&nbsp;:&nbsp;匹配所有的数字和字母以及下划线</span></p>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">&nbsp;</span></p>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">利用正则寻找邮箱</span></p>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">exec()&nbsp;方法用于检索字符串中的正则表达式的匹配。返回一个数组，其中存放匹配的结果。如果未找到匹配，则返回值为&nbsp;null。</span></p>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">&nbsp;<img src=\"https://images2015.cnblogs.com/blog/1011409/201608/1011409-20160825163744944-2079638619.png\" alt=\"\" /></span></p>\n<p>&nbsp;</p>\n<p>高级</p>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">函数嵌套&nbsp;：&nbsp;分析的时候从外到内分析。执行从内到外找</span></p>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">具体步骤:</span></p>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">0:&nbsp;函数运行前的1瞬间,&nbsp;生成&nbsp;Active&nbsp;Object&nbsp;(活动对象),下称AO</span></p>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">1:&nbsp;</span></p>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">&nbsp;&nbsp;&nbsp;1.1&nbsp;函数声明的形参,形成AO的属性,值全是undefined,</span></p>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">&nbsp;&nbsp;&nbsp;1.2&nbsp;接收实参,形成AO相应的属性的值</span></p>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">2:&nbsp;分析变量声明!&nbsp;如&nbsp;var&nbsp;age,&nbsp;</span></p>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">&nbsp;&nbsp;&nbsp;如果AO上还没有age属性,则添加AO属性,值是undefined</span></p>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">&nbsp;&nbsp;&nbsp;如果AO上已经有age属性,则不操作；变量赋值是在执行期执行</span></p>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">&nbsp; &nbsp;</span></p>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">3:&nbsp;分析函数声明,如&nbsp;function&nbsp;foo()&nbsp;{},&nbsp;</span></p>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">则把函数赋给AO.foo属性</span></p>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">注:&nbsp;如果此前foo属性已存在,则被覆盖成函数</span></p>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\"><img src=\"https://images2015.cnblogs.com/blog/1011409/201608/1011409-20160825164221913-1626182164.png\" alt=\"\" /></span></p>\n<p><img src=\"https://images2015.cnblogs.com/blog/1011409/201608/1011409-20160825164228241-262471335.png\" alt=\"\" /></p>\n<p><img src=\"https://images2015.cnblogs.com/blog/1011409/201608/1011409-20160825164236741-1392797998.png\" alt=\"\" /></p>\n<p>&nbsp;</p>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">先在里层寻找该参数，如果没有再一直往外找，直到找到为止</span></p>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">如果有多个相同的值，去最近的；注意函数的嵌套里层的函数需要被调用才能执行行</span></p>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">&nbsp;<img src=\"https://images2015.cnblogs.com/blog/1011409/201608/1011409-20160825164249991-1748243859.png\" alt=\"\" /></span></p>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">var是在函数的上下文中声明变量，</span></p>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">如果没有加var只是一个赋值操作，</span></p>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">&nbsp;</span></p>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">函数之外的范围就被称作window了，也就是全局</span></p>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">&nbsp;</span></p>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">console.log(d);&nbsp;//表示在控制台输出d变量</span></p>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">一旦执行到某个地方有错后面的代码不再执行即是直接退出程序，一般会在控制台输出错误信息</span></p>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">&nbsp;</span></p>\n<h1><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">arguments</span></h1>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">是函数运行时形成的实参列表，是一个对象，类似数组对象。不是数组。索引从0开始</span></p>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">arguments.length&nbsp;获取实参的个数。每个函数都有自身的arguments，不能被外部引用</span></p>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">&nbsp;</span></p>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">callee作用是代表当前运行的函数，在匿名函数的时没名字还要进行递归这是就能使用</span></p>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">如&nbsp;n&nbsp;+&nbsp;t(n-1)&nbsp;&nbsp;&agrave;&nbsp;&nbsp;n&nbsp;+&nbsp;arguments.callee(n-1);</span></p>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">typeof</span></p>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">&nbsp;</span></p>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">函数运行其内,关键的三个对象</span></p>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">AO&nbsp;---&gt;&nbsp;本函数AO上没有某属性,则继续去外层函数的AO上找,直到全局对象.&nbsp;叫做&nbsp;作用域链</span></p>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">arguments&nbsp;---&gt;&nbsp;每个函数有自己的callee,但&nbsp;不&nbsp;向外层接着找arguments的相关属性,即&nbsp;不形成链</span></p>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">this</span></p>\n<h1><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">this</span></h1>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">1:作为普通函数来调用时,</span></p>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">this的值指向-&gt;window,相当它</span></p>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">准确的说,this为null,但被解释成window</span></p>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">在ECMASCRIPT5标准中,&nbsp;如果this为null,则解释成undefine*/</span></p>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">&nbsp;<img src=\"https://images2015.cnblogs.com/blog/1011409/201608/1011409-20160825164300366-1837346887.png\" alt=\"\" /></span></p>\n<p class=\"p0\">&nbsp;</p>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">2:&nbsp;作为对象的方法来调用</span></p>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">this指向方法的调用者,即该对象。作为方法调用时,</span></p>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">this指向其调用那一刻的调用者,即母体对象。不管被调用函数,声明时属于方法,还是函数</span></p>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">&nbsp;</span></p>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">3:函数作为构造函数调用时</span></p>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">JS没有类的概念，常见对象是用构造函数来完成的，或者直接使用json格式来写对象</span></p>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">&nbsp;</span></p>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">new&nbsp;Dog发生了以下几个步骤</span></p>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">系统创建空对象&nbsp;&agrave;&nbsp;把函数的this指向空对象&nbsp;&agrave;&nbsp;执行函数&nbsp;&agrave;&nbsp;返回该对象</span></p>\n<p class=\"p0\">&nbsp;</p>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">4：函数通过call（对象，参数）</span></p>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">t函数的this指向当前对象&nbsp;；&nbsp;然后运行t函数</span></p>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">&nbsp;<img src=\"https://images2015.cnblogs.com/blog/1011409/201608/1011409-20160825164333710-1206062263.png\" alt=\"\" /></span></p>\n<p>&nbsp;</p>\n<p><strong><span style=\"font-family: 'Microsoft YaHei'; line-height: 1.5;\">闭包问题</span></strong></p>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">闭包维护一个别人污染不到的变量</span></p>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">&nbsp;<img src=\"https://images2015.cnblogs.com/blog/1011409/201608/1011409-20160825164604429-606993043.png\" alt=\"\" /></span></p>\n<p>&nbsp;</p>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">1:在大部分的语言中,t1被调用执行,则申请内存</span></p>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">并把其局部变量,push入栈!</span></p>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">t1函数执行完毕,内部的局部变量,随着函数的退出而销毁</span></p>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">因此,&nbsp;age&nbsp;=&nbsp;20的局部变量,依靠已经消失了.</span></p>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">&nbsp;</span></p>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">在js中,&nbsp;age&nbsp;=&nbsp;20这个变量,却被t2捕捉,</span></p>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">即使t1执行完毕,通过t2,依然能访问该变量</span></p>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">&nbsp;</span></p>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">这种情况---返回的函数,并非孤立的函数,甚至把其周围的变量环境,</span></p>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">形成了一封闭的\"环境包\",共同返回,&nbsp;所以叫\"闭包\"</span></p>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">&nbsp;</span></p>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">----一句话概括-----函数的作用域取决于声明时,而不取决于调用时</span></p>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">&nbsp;</span></p>\n<h1><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">JS对象的特点</span></h1>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">在js中,有对象,没有类(但有构造函数),&nbsp;JS中的对象,不依赖于类而存在,</span></p>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">支持任意添加和删除属性,&nbsp;方法和属性不必区分.</span></p>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\"><img src=\"https://images2015.cnblogs.com/blog/1011409/201608/1011409-20160825165031335-278016172.png\" alt=\"\" /></span></p>\n<p><img src=\"https://images2015.cnblogs.com/blog/1011409/201608/1011409-20160825165036132-2141143741.png\" alt=\"\" /></p>\n<p>&nbsp;</p>\n<h1><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">JS封装</span></h1>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">通过闭包来完成js面向对象的私有属性与封装</span></p>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\"><img src=\"https://images2015.cnblogs.com/blog/1011409/201608/1011409-20160825165050585-1091810842.png\" alt=\"\" /></span></p>\n<p>&nbsp;</p>\n<h1><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">关于JS继承与原型链的问题</span></h1>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">每个函数都有一个prototype属性，这个属性是指向一个对象的引用，这个对象称为原型对象，原型对象包含函数实例共享的方法和属性，也就是说将函数用作构造函数调用（使用new操作符调用）的时候，新创建的对象会从原型对象上继承属性和方法。</span></p>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">&nbsp;<img src=\"https://images2015.cnblogs.com/blog/1011409/201608/1011409-20160825165101772-415873445.png\" alt=\"\" /></span></p>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">老虎先在自己的对象找爬树方法，没有，再去原型中找（原型从cat函数返回的对象中克隆得到）发现有则调用。如果没有就继续往上一级原型找</span></p>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">原型链&nbsp;：&nbsp;对象&agrave;原型&agrave;原型原型&agrave;Object对象&agrave;Null</span></p>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">所以只要修改上游的原型就会影响下游&nbsp;，&nbsp;如Object.prototype.sing&nbsp;=&nbsp;&lsquo;&rsquo;；</span></p>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">还能直接修改属性，tiger.prototype.bark&nbsp;=&nbsp;function()&nbsp;{alert(&lsquo;我是老虎！&rsquo;);}</span></p>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">&nbsp;<img src=\"https://images2015.cnblogs.com/blog/1011409/201608/1011409-20160825165117647-963817205.png\" alt=\"\" /></span></p>\n<p>&nbsp;</p>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">每个对象,都有一个__proto__指向其原型对象,如hnhu对象有一个__proto__指向其原型对象。原型对象也是对象故也有__proto__&nbsp;指向其原型对象</span></p>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">console.log(hnhu);得到</span></p>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">&nbsp;<img src=\"https://images2015.cnblogs.com/blog/1011409/201608/1011409-20160825165233272-642757726.png\" alt=\"\" /></span></p>\n<h1><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">原型冒充与复制继承&nbsp;</span></h1>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">好处：不会影响原型链，下游不影响</span></p>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">原型冒充</span></p>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">&nbsp;<img src=\"https://images2015.cnblogs.com/blog/1011409/201608/1011409-20160825165350616-2073496815.png\" alt=\"\" /></span></p>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">在用Tiger造对象时,在Tiger影响空对象前,先用要继承的函数即是由Cat函数实施影响</span></p>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">因此,最终得到的对象,是由Cat和Tiger两者共同作用过的对象（具有Cat对象的特性）</span></p>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">&nbsp;</span></p>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">复制继承</span></p>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">&nbsp;<img src=\"https://images2015.cnblogs.com/blog/1011409/201608/1011409-20160825165358851-1393751632.png\" alt=\"\" /></span></p>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">多态模拟</span></p>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">多态&nbsp;传实参的时候必须为对应的对象类型&nbsp;，&nbsp;变继承之后，父类作为形参，只要传子类也可，多态</span></p>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">&nbsp;</span></p>\n<h1><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">绑定事件</span></h1>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\"><img src=\"https://images2015.cnblogs.com/blog/1011409/201608/1011409-20160825170105179-1707177963.png\" alt=\"\" /></span></p>\n<p>&nbsp;</p>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">绑定事件的方式</span></p>\n<p class=\"p15\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">1、&nbsp;直接写在html标签中&nbsp;：&nbsp;几乎所有浏览器都支持，但是不简洁没分离，效率低</span></p>\n<p class=\"p15\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">&nbsp;</span></p>\n<p class=\"p15\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">2、&nbsp;addEventListener&nbsp;进行绑定</span></p>\n<p class=\"p15\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">参数解析&nbsp;：&nbsp;</span></p>\n<p class=\"p15\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">1:&nbsp;绑在哪个事件上?&nbsp;&nbsp;click,load,change,blur,focus,mouseover,mouseup.等(没on)</span></p>\n<p class=\"p15\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">2:&nbsp;绑定什么函数---自定义事件函数</span></p>\n<p class=\"p15\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">3:&nbsp;什么方式监听执行事件函数?&nbsp;捕捉,冒泡?</span></p>\n<p class=\"p15\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">&nbsp;<img src=\"https://images2015.cnblogs.com/blog/1011409/201608/1011409-20160825170134647-1628502855.png\" alt=\"\" /></span></p>\n<p class=\"p0\"><strong><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">&nbsp;详解第三个参数</span></strong></p>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">&nbsp;&nbsp;第三个参数默认为false，表示冒泡模型，即是多个触发事件的时候执行顺序是从&nbsp;里层开始执行到外层</span></p>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">&nbsp;&nbsp;&nbsp;true，表示捕抓模型，</span></p>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">&nbsp;如&nbsp;：&nbsp;3个div,从大到小，分别命名为china,bj,hd，并添加点击事件</span></p>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">&nbsp;<img src=\"https://images2015.cnblogs.com/blog/1011409/201608/1011409-20160825170911757-1156987846.png\" alt=\"\" /></span></p>\n<p><img src=\"https://images2015.cnblogs.com/blog/1011409/201608/1011409-20160825170915647-1709155420.png\" alt=\"\" /></p>\n<p>&nbsp;</p>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">图解原因</span></p>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">红色为捕抓从最大的找要执行的事件；绿色为冒泡</span></p>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">&nbsp;<img src=\"https://images2015.cnblogs.com/blog/1011409/201608/1011409-20160825170927288-1251188959.png\" alt=\"\" /></span></p>\n<p class=\"p0\">&nbsp;</p>\n<p class=\"p0\">&nbsp;</p>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">经验之把经常重复的语句封装到一个方法</span></p>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">&nbsp;<strong><img src=\"https://images2015.cnblogs.com/blog/1011409/201608/1011409-20160825170937101-1980627998.png\" alt=\"\" /></strong></span></p>\n<p>&nbsp;</p>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">事件停止&nbsp;&nbsp;removeEventListener</span></p>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">&nbsp;<img src=\"https://images2015.cnblogs.com/blog/1011409/201608/1011409-20160825170949913-1916150019.png\" alt=\"\" /></span></p>\n<p>&nbsp;</p>\n<p><strong><span style=\"font-family: 'Microsoft YaHei';\">实战 三级联动</span></strong></p>\n<div class=\"cnblogs_code\">\n<pre>&lt;!DOCTYPE html PUBLIC <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">-//W3C//DTD XHTML 1.0 Strict//EN</span><span style=\"color: #800000;\">\"</span> <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd</span><span style=\"color: #800000;\">\"</span>&gt;\n&lt;html xmlns=<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">http://www.w3.org/1999/xhtml</span><span style=\"color: #800000;\">\"</span> lang=<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">zh-CN</span><span style=\"color: #800000;\">\"</span>&gt;\n&lt;head&gt;\n&lt;title&gt;新建网页&lt;/title&gt;\n&lt;meta http-equiv=<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Content-Type</span><span style=\"color: #800000;\">\"</span> content=<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">text/html; charset=utf-8</span><span style=\"color: #800000;\">\"</span> /&gt;\n&lt;meta name=<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">description</span><span style=\"color: #800000;\">\"</span> content=<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">\"</span> /&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;<span style=\"color: #0000ff;\">select</span> name=<span style=\"color: #800000;\">\"\"</span> id=<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">pro</span><span style=\"color: #800000;\">\"</span>&gt;\n        &lt;option value=<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">-1</span><span style=\"color: #800000;\">\"</span>&gt;请选择&lt;/option&gt;\n        &lt;option value=<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">0</span><span style=\"color: #800000;\">\"</span>&gt;广东&lt;/option&gt;\n        &lt;option value=<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">1</span><span style=\"color: #800000;\">\"</span>&gt;江苏&lt;/option&gt;\n    &lt;/<span style=\"color: #0000ff;\">select</span>&gt;\n\n    &lt;<span style=\"color: #0000ff;\">select</span> name=<span style=\"color: #800000;\">\"\"</span> id=<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">ct</span><span style=\"color: #800000;\">\"</span> &gt;&lt;/<span style=\"color: #0000ff;\">select</span>&gt;\n\n    &lt;<span style=\"color: #0000ff;\">select</span> name=<span style=\"color: #800000;\">\"\"</span> id=<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">cty</span><span style=\"color: #800000;\">\"</span>&gt;&lt;/<span style=\"color: #0000ff;\">select</span>&gt;\n&lt;/body&gt;\n\n&lt;script&gt;\n    <span style=\"color: #0000ff;\">var</span> area =<span style=\"color: #000000;\"> [\n                [</span><span style=\"color: #800000;\">'</span><span style=\"color: #800000;\">广州</span><span style=\"color: #800000;\">'</span>,<span style=\"color: #800000;\">'</span><span style=\"color: #800000;\">珠海</span><span style=\"color: #800000;\">'</span><span style=\"color: #000000;\">],\n                [</span><span style=\"color: #800000;\">'</span><span style=\"color: #800000;\">南京</span><span style=\"color: #800000;\">'</span>,<span style=\"color: #800000;\">'</span><span style=\"color: #800000;\">苏州</span><span style=\"color: #800000;\">'</span><span style=\"color: #000000;\">]\n    ];\n\n    </span><span style=\"color: #0000ff;\">var</span> area2 =<span style=\"color: #000000;\">  [\n                [[</span><span style=\"color: #800000;\">'</span><span style=\"color: #800000;\">花都</span><span style=\"color: #800000;\">'</span>,<span style=\"color: #800000;\">'</span><span style=\"color: #800000;\">番禺</span><span style=\"color: #800000;\">'</span>],[<span style=\"color: #800000;\">'</span><span style=\"color: #800000;\">香洲</span><span style=\"color: #800000;\">'</span>,<span style=\"color: #800000;\">'</span><span style=\"color: #800000;\">斗门</span><span style=\"color: #800000;\">'</span><span style=\"color: #000000;\">]],\n                [[</span><span style=\"color: #800000;\">'</span><span style=\"color: #800000;\">江宁</span><span style=\"color: #800000;\">'</span>,<span style=\"color: #800000;\">'</span><span style=\"color: #800000;\">栖霞</span><span style=\"color: #800000;\">'</span>],[<span style=\"color: #800000;\">'</span><span style=\"color: #800000;\">吴中</span><span style=\"color: #800000;\">'</span>,<span style=\"color: #800000;\">'</span><span style=\"color: #800000;\">吴江</span><span style=\"color: #800000;\">'</span><span style=\"color: #000000;\">]]\n    ];\n    \n    </span><span style=\"color: #0000ff;\">var</span> dprovince = document.getElementById(<span style=\"color: #800000;\">'</span><span style=\"color: #800000;\">pro</span><span style=\"color: #800000;\">'</span><span style=\"color: #000000;\">);\n    </span><span style=\"color: #0000ff;\">var</span> dcity = document.getElementById(<span style=\"color: #800000;\">'</span><span style=\"color: #800000;\">ct</span><span style=\"color: #800000;\">'</span><span style=\"color: #000000;\">);\n    </span><span style=\"color: #0000ff;\">var</span> dcounty = document.getElementById(<span style=\"color: #800000;\">'</span><span style=\"color: #800000;\">cty</span><span style=\"color: #800000;\">'</span><span style=\"color: #000000;\">);\n\n    dprovince.onchange </span>=<span style=\"color: #000000;\"> function(){\n        \n        </span><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">注意放在里面每次初始化清空</span>\n        <span style=\"color: #0000ff;\">var</span> opt = <span style=\"color: #800000;\">''</span><span style=\"color: #000000;\">;\n        </span><span style=\"color: #0000ff;\">if</span> (<span style=\"color: #0000ff;\">this</span>.value == <span style=\"color: #800000;\">'</span><span style=\"color: #800000;\">-1</span><span style=\"color: #800000;\">'</span><span style=\"color: #000000;\">){\n            darea.innerHTML </span>=<span style=\"color: #000000;\"> opt;\n            </span><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">dcounty.innerHTML = opt;</span>\n<span style=\"color: #000000;\">        }\n\n        </span><span style=\"color: #0000ff;\">var</span> len =<span style=\"color: #000000;\"> area[dprovince.value].length;\n        </span><span style=\"color: #0000ff;\">for</span> (<span style=\"color: #0000ff;\">var</span> i = <span style=\"color: #800080;\">0</span>; i &lt; len ; i++<span style=\"color: #000000;\">){\n            opt </span>= opt + <span style=\"color: #800000;\">'</span><span style=\"color: #800000;\">&lt;option value =\"</span><span style=\"color: #800000;\">'</span> + i + <span style=\"color: #800000;\">'</span><span style=\"color: #800000;\">\"&gt;</span><span style=\"color: #800000;\">'</span> + area[<span style=\"color: #0000ff;\">this</span>.value][i] + <span style=\"color: #800000;\">'</span><span style=\"color: #800000;\">&lt;/option&gt;</span><span style=\"color: #800000;\">'</span><span style=\"color: #000000;\">;\n        }\n        dcity.innerHTML </span>=<span style=\"color: #000000;\"> opt;\n</span>        <span style=\"color: #0000ff;\">var</span> opt2 = <span style=\"color: #800000;\">''</span><span style=\"color: #000000;\">;\n        </span><span style=\"color: #0000ff;\">var</span> len2 = area2[<span style=\"color: #0000ff;\">this</span>.value][<span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">].length;\n        </span><span style=\"color: #0000ff;\">for</span> (<span style=\"color: #0000ff;\">var</span> i = <span style=\"color: #800080;\">0</span>; i &lt; len2 ; i++<span style=\"color: #000000;\">){\n            opt2 </span>= opt2 + <span style=\"color: #800000;\">'</span><span style=\"color: #800000;\">&lt;option value =\"</span><span style=\"color: #800000;\">'</span> + i + <span style=\"color: #800000;\">'</span><span style=\"color: #800000;\">\"&gt;</span><span style=\"color: #800000;\">'</span> + area2[<span style=\"color: #0000ff;\">this</span>.value][<span style=\"color: #800080;\">0</span>][i] + <span style=\"color: #800000;\">'</span><span style=\"color: #800000;\">&lt;/option&gt;</span><span style=\"color: #800000;\">'</span><span style=\"color: #000000;\">;\n        }\n        dcounty.innerHTML </span>=<span style=\"color: #000000;\"> opt2;\n    }\n\n        </span><span style=\"color: #008000;\">//\n</span>        dcity.onclick =<span style=\"color: #000000;\"> function (){\n            </span><span style=\"color: #0000ff;\">var</span><span style=\"color: #000000;\"> opt2;\n            </span><span style=\"color: #0000ff;\">var</span> len2 =<span style=\"color: #000000;\"> area2[dprovince.value][dcity.value].length;\n            </span><span style=\"color: #0000ff;\">for</span> (<span style=\"color: #0000ff;\">var</span> i = <span style=\"color: #800080;\">0</span>; i &lt; len2 ; i++<span style=\"color: #000000;\">){\n                opt2 </span>= opt2 + <span style=\"color: #800000;\">'</span><span style=\"color: #800000;\">&lt;option value =\"</span><span style=\"color: #800000;\">'</span> + i + <span style=\"color: #800000;\">'</span><span style=\"color: #800000;\">\"&gt;</span><span style=\"color: #800000;\">'</span> + area2[dprovince.value][dcity.value][i] + <span style=\"color: #800000;\">'</span><span style=\"color: #800000;\">&lt;/option&gt;</span><span style=\"color: #800000;\">'</span><span style=\"color: #000000;\">;\n            }\n            dcounty.innerHTML </span>=<span style=\"color: #000000;\"> opt2;\n            \n        }\n\n</span>&lt;/script&gt;\n&lt;/html&gt;</pre>\n</div>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">&nbsp;<img src=\"https://images2015.cnblogs.com/blog/1011409/201608/1011409-20160825180710319-1696399851.png\" alt=\"\" /></span></p>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">因为多了个空格导致获取的value值有问题，然而我用了一个下午排错，日了狗，空格真的很难找出错误，所以以后变成不必要的空格别用</span></p>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">&nbsp;</span></p>\n<h1><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">头像修改</span></h1>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">this作用是表示当前函数执行所在的标签对象</span></p>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\"><img src=\"https://images2015.cnblogs.com/blog/1011409/201608/1011409-20160825180841976-2094043249.png\" alt=\"\" /></span></p>\n<p>&nbsp;</p>\n<p class=\"p0\"><span style=\"font-family: 'Microsoft YaHei'; font-size: 14px;\">&nbsp;</span></p>\n</div>\n<div id=\"MySignature\"></div>\n<div class=\"clear\"></div>\n<div id=\"blog_post_info_block\">\n    <div id=\"blog_post_info\"></div>\n    <div class=\"clear\"></div>\n    <div id=\"post_next_prev\"></div>\n</div>\n            </div>"
    }
  ],
  "react": [
    {
      "header": "React基础(上)",
      "body": " <article class=\"baidu_pl\">\n                 <div id=\"article_content\" class=\"article_content clearfix\">\n            <link rel=\"stylesheet\" href=\"https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-211130ba7a.css\" />\n                            <div id=\"content_views\" class=\"markdown_views prism-atom-one-dark\">\n                    <!-- flowchart 箭头图标 勿删 -->\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" style=\"display: none;\">\n                        <path stroke-linecap=\"round\" d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n                    </svg>\n                                            <p></p><div class=\"toc\"><h3>react基础教程</h3><ul><ul><li><a href=\"#_3\" rel=\"nofollow\">官网</a></li><li><a href=\"#_10\" rel=\"nofollow\">安装</a></li><li><a href=\"#_31\" rel=\"nofollow\">目录结构</a></li><li><a href=\"#hello_world_36\" rel=\"nofollow\">hello world</a></li><li><a href=\"#_82\" rel=\"nofollow\">组件化</a></li><li><a href=\"#_105\" rel=\"nofollow\">图片和样式表的引入</a></li></ul></ul></div><p></p>\n<ul>\n<li>学习资源推荐：https://blog.csdn.net/qq_42813491/article/details/90213353</li>\n</ul>\n<h2><a id=\"_3\"></a>官网</h2>\n<ul>\n<li>\n<p>https://react.docschina.org/<br>\n</p>\n</li>\n<li>\n<p>官方教程：https://react.docschina.org/tutorial/tutorial.html</p>\n</li>\n<li>\n<p>介绍什么的就不说了，从代码开始</p>\n</li>\n</ul>\n<h2><a id=\"_10\"></a>安装</h2>\n<ul>\n<li>在此之前，请确保已经安装了node.js.</li>\n<li>cmd输入<code>node -v</code> 显示版本号表示已成功安装</li>\n<li>node官网：https://nodejs.org/en/<br>\n<img src=\"https://img-blog.csdnimg.cn/2019061308131216.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyODEzNDkx,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></li>\n<li>快速开始</li>\n</ul>\n<pre><code class=\"prism language-shell\">npx create-react-app my-app\n<span class=\"token function\">cd</span> my-app\n<span class=\"token function\">npm</span> start\n</code></pre>\n<ul>\n<li>\n<p>注意，安装是外网安装，建议使用镜像，不然会很慢</p>\n</li>\n<li>\n<p>详情可参考：https://blog.csdn.net/qq_42813491/article/details/90311075</p>\n</li>\n<li>\n<p>以上三个命令执行完，显示以下界面表示脚手架安装成功<br>\n<img src=\"https://img-blog.csdnimg.cn/20190613083045831.png\" alt=\"在这里插入图片描述\"></p>\n</li>\n<li>\n<p>这是主界面，跑在3000端口<br>\n<img src=\"https://img-blog.csdnimg.cn/2019061308313013.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyODEzNDkx,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n</li>\n</ul>\n<h2><a id=\"_31\"></a>目录结构</h2>\n<p><img src=\"https://img-blog.csdnimg.cn/20190613083941481.png\" alt=\"在这里插入图片描述\"></p>\n<ul>\n<li>都很常见，不多介绍了</li>\n</ul>\n<h2><a id=\"hello_world_36\"></a>hello world</h2>\n<ul>\n<li>src下一些没用的可以删掉，如下：看起来对新手更友好</li>\n</ul>\n<p><img src=\"https://img-blog.csdnimg.cn/20190613084653963.png\" alt=\"在这里插入图片描述\"></p>\n<ul>\n<li>index.js入口文件和下边的服务器相关配置文件不要动了，css什么的可以删掉</li>\n<li>APP.js</li>\n</ul>\n<pre><code class=\"prism language-js\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">App</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span><span class=\"token punctuation\">{</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">&gt;</span>hello world<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">&gt;</span>\n  <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> App<span class=\"token punctuation\">;</span>\n</code></pre>\n<ul>\n<li>也可以这样</li>\n</ul>\n<pre><code class=\"prism language-js\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>Component<span class=\"token punctuation\">}</span><span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">App</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span><span class=\"token punctuation\">{</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">&gt;</span>hello world<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">&gt;</span>\n  <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> App<span class=\"token punctuation\">;</span>\n</code></pre>\n<ul>\n<li>\n<p>效果图<br>\n<img src=\"https://img-blog.csdnimg.cn/20190613084547413.png\" alt=\"在这里插入图片描述\"></p>\n</li>\n<li>\n<p>注意点</p>\n</li>\n<li>\n<p>render里边是html+js混写的jsx语法，HTML标签不需要加引号</p>\n</li>\n<li>\n<p>最外层一定要有个根标签包裹，最好再加上一个圆括号</p>\n</li>\n<li>\n<p>单标签必须封闭<br>\n<img src=\"https://img-blog.csdnimg.cn/20190613085343218.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyODEzNDkx,size_16,color_FFFFFF,t_70\" alt=\"*\"></p>\n</li>\n</ul>\n<h2><a id=\"_82\"></a>组件化</h2>\n<blockquote>\n<p>虽然render函数里边就可以直接写模板，但是通常不会把一切东西都放进去.不利于维护，也不美观，常用的自然是组件化开发。</p>\n</blockquote>\n<ul>\n<li>\n<p>修改目录结构，src下新建components文件夹，用来放各个组件<br>\n<code>注意，规范中组件名大写，且以js或jsx为后缀名,就像.vue 文件一样</code></p>\n</li>\n<li>\n<p>可能你的编辑器写完了是这样的<br>\n<img src=\"https://img-blog.csdnimg.cn/20190613090906754.png\" alt=\"在这里插入图片描述\"></p>\n</li>\n<li>\n<p>颜色怪是语法识别问题，把编译环境换成jsx就好了</p>\n</li>\n<li>\n<p>组件定义完记得暴露出去，APP界面用import导入，然后挂载使用</p>\n</li>\n</ul>\n<p><img src=\"https://img-blog.csdnimg.cn/20190613091530821.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyODEzNDkx,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<ul>\n<li>\n<p>效果图<br>\n<img src=\"https://img-blog.csdnimg.cn/20190613091338328.png\" alt=\"在这里插入图片描述\"></p>\n</li>\n<li>\n<p>数据的定义和使用，类似vue的data</p>\n</li>\n</ul>\n<p><img src=\"https://img-blog.csdnimg.cn/20190613092458269.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyODEzNDkx,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<ul>\n<li>直接在render里边写会有警告，应该写在构造函数里边<br>\n<img src=\"https://img-blog.csdnimg.cn/20190613092747754.png\" alt=\"在这里插入图片描述\"></li>\n</ul>\n<h2><a id=\"_105\"></a>图片和样式表的引入</h2>\n<ul>\n<li>图片资源分为本地和远程，加载远程资源直接src引入图片地址就可以</li>\n<li>记得加alt属性，不然会有警告</li>\n</ul>\n<pre><code> &lt;img alt=\"logo\"src=\"https://ss0.baidu.com/6ONWsjip0QIZ8tyhnq/it/u=2920084749,2018893236&amp;fm=58&amp;s=39C718720E8EBE011B398BAC0300F024&amp;bpow=121&amp;bpoh=75\"/&gt;\n</code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/20190613093156472.png\" alt=\"在这里插入图片描述\"></p>\n<ul>\n<li>本地图片加载和本地样式表加载是路径引入的方式</li>\n</ul>\n<p>*<code>import logo from './logo.png'</code><br>\n<code>&lt;img alt=\"logo\" src={logo}/&gt;</code></p>\n<ul>\n<li><code>{}</code>是react的jsx语法环境</li>\n<li><code>import style from './style.css'</code><br>\n<img src=\"https://img-blog.csdnimg.cn/20190613093941364.png\" alt=\"在这里插入图片描述\"></li>\n</ul>\n\n                                    </div>\n                <link href=\"https://csdnimg.cn/release/phoenix/mdeditor/markdown_views-60ecaf1f42.css\" rel=\"stylesheet\">\n                                </div>\n    </article>"
    },
    {
      "header": "React基础(中)",
      "body": ""
    },
    {
      "header": "React基础(下)",
      "body": ""
    }
  ],
  "vue": [
    {
      "header": "vue基础(上)",
      "body": ""
    },
    {
      "header": "vue基础(中)",
      "body": ""
    },
    {
      "header": "vue基础(下)",
      "body": ""
    }
  ],
  "articleTitle": {
    "js": [{
      "title": "JS基础(上)",
      "time": "2019-6-12",
      "author": "Tom",
      "read": 1000,
      "comment": 20,
      "repo": "https://github.com/cheng733"

    },{
      "title": "JS基础(中)",
      "time": "2019-6-20",
      "author": "Jack",
      "read": 2000,
      "comment": 10,
      "repo": "https://github.com/cheng733"
    },{
      "title": "JS基础(下)",
      "time": "2019-7-1",
      "author": "KeLun",
      "read": 455,
      "comment": 40,
      "repo": "https://github.com/cheng733"
    }],
    "react": [{
      "title": "react基础(上)",
      "time": "2019-6-12",
      "author": "Tom",
      "read": 1000,
      "comment": 20,
      "repo": "https://github.com/cheng733"
    },{
      "title": "react基础(中)",
      "time": "2019-6-12",
      "author": "Tom",
      "read": 1000,
      "comment": 20,
      "repo": "https://github.com/cheng733"
    },{
      "title": "react基础(下)",
      "time": "2019-6-12",
      "author": "Tom",
      "read": 1000,
      "comment": 20,
      "repo": "https://github.com/cheng733"
    }],
    "vue": [{
      "title": "vue基础(上)",
      "time": "2019-6-12",
      "author": "Tom",
      "read": 1000,
      "comment": 20,
      "repo": "https://github.com/cheng733"
    },{
      "title": "vue基础(中)",
      "time": "2019-6-12",
      "author": "Tom",
      "read": 1000,
      "comment": 20,
      "repo": "https://github.com/cheng733"
    },{
      "title": "vue基础(下)",
      "time": "2019-6-12",
      "author": "Tom",
      "read": 1000,
      "comment": 20,
      "repo": "https://github.com/cheng733"
    }]
  }
}
